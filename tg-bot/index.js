const Telegraf = require('telegraf')
const RedisSession = require('telegraf-session-redis')
const mongoose = require('mongoose')
/* Initializing mongoose schemes */
require('./models/mongooseScheme')

const config = require('./config')
const api = require('./api')
const bot = new Telegraf(config.TELEGRAM_API_KEY)

const utils = require('./utils')

const {
  ELECTORS_ATTENDANCE_CALLBACK_REPLY,
  ELECTORS_ATTENDANCE_VALUES,
  ACTION_TYPES,
  BOT_TEXT
} = require('./constants')

console.log(api)

/* BOT COMMANDS

 setlocation - –Ø –ø—Ä–∏—à—ë–ª –Ω–∞ —É—á–∞—Å—Ç–æ–∫
 getmainmenu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 me - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
 help - –ü–æ–º–æ—â—å
 aboutverification - –û –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 verifyme - –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –º–µ–Ω—è
 */

/*
 * Setting up MongoDB connection
 */
mongoose.Promise = Promise
const connection = mongoose.connect(config.MONGODB_DATABASE_PATH)

/*
 * Setting up RedisDB connection
 */
const redisSession = new RedisSession({
  store: {
    url: config.REDIS_SESSION_URL
  }
})
bot.use(redisSession.middleware())

function incrementCounter(ctx) {
  ctx.session.counter = ctx.session.counter || 0
  ctx.session.counter++
}

function setLatestMessageID(ctx) {
  ctx.session.latestMessageId = ctx.message.message_id
}

const app = {
  MAIN_KEYBOARD: [
    [
      {
        text: '‚ûï 1 —á–µ–ª–æ–≤–µ–∫ üë§',
        callback_data: ACTION_TYPES.COUNT_1_ELECTOR
      }
    ],
    [
      {
        text: '‚ûï 2 —á–µ–ª–æ–≤–µ–∫–∞ üë´',
        callback_data: ACTION_TYPES.COUNT_5_ELECTORS
      },
      {
        text: '‚ûï 5 —á–µ–ª–æ–≤–µ–∫ üë™',
        callback_data: ACTION_TYPES.COUNT_10_ELECTORS
      }
    ],
    [
      {
        text: '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        callback_data: ACTION_TYPES.REQUEST_UPDATE
      }
    ]
  ],
  GO_TO_MAIN_MENU: [
    [
      {
        text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: ACTION_TYPES.GET_MAIN_MENU
      }
    ]
  ],
  I_AM_ON_THE_POLLING_STATION: [
    [
      {
        text: '–Ø –Ω–∞ –º–µ—Å—Ç–µ',
        callback_data: ACTION_TYPES.SEND_REQUEST_LOCATION
      }
    ]
  ]
}

bot.command('start', async (ctx) => {
  const userInfo = ctx.from

  /*
    check if user exists in mongodb
  */
  if (await api.users.isUserExistByTelegramId(userInfo.id)) {
    /* exists, */
    return botRenderAbout(ctx)
  }

  /*
    user is not signed up yet.
    make a registration
  */
  console.log(userInfo)
  await api.users.createTelegramUser({
    id: userInfo.id,
    first_name: userInfo.first_name,
    last_name: userInfo.last_name,
    username: userInfo.username,
    isVerified: true /* @TODO: make verification function */
  })

  const verificationToken = ctx.message.text.split(' ')[1]
  console.log('verificationToken', verificationToken)
  if (verificationToken) {
    try {
      await api.users.verifyTelegramUser(
        verificationToken, userInfo.id
      )
    } catch (error) {
      console.log(error)
      return ctx.reply('–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è. –ü–æ–¥—Ä–æ–±–Ω–µ–µ /aboutverification')
    }
  }

  return botRenderAbout(ctx)
})

function botRequestLocation(ctx) {
  ctx.reply(BOT_TEXT.REQUEST_LOCATION_MESSAGE, {
    reply_markup: {
      keyboard: [
        [{
          text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
          request_location: true
        }]
      ],
      resize_keyboard: true
    }
  })
}

function botRenderGoToPollingStation(ctx) {
  ctx.reply('üëÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—è–≤–∏—Ç—Å—è —Å—Ä–∞–∑—É –∂–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø—Ä–∏–¥—ë—Ç–µ –Ω–∞ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', {
    parse_mode: 'markdown',
    reply_markup: {
      inline_keyboard: app.I_AM_ON_THE_POLLING_STATION
    }
  })
}

function botRenderMainMenu(ctx) {
  if (!ctx.session.isLocationSet) {
    return botRenderGoToPollingStation(ctx)
  }
  return ctx.reply(`üôã‚Äç‚ôÇÔ∏è –í—ã —É–∂–µ –Ω–∞ —É—á–∞—Å—Ç–∫–µ –∏ –≥–æ—Ç–æ–≤—ã —Å—á–∏—Ç–∞—Ç—å? –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ ‚Äî –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.\n üïµÔ∏è –ó–∞–º–µ—Ç–∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ? –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –Ω–∞–º.`, {
    parse_mode: 'markdown',
    reply_markup: {
      inline_keyboard: app.MAIN_KEYBOARD
    }
  })
}

function botRenderUserProfile(ctx) {
  ctx.reply([`—Å—Ç–∞—Ç—É—Å: –ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω* (–ø–æ–¥—Ä–æ–±–Ω–µ–µ: /aboutverification)`].join('\n'))
}

function botRenderAboutVerification(ctx) {
  ctx.reply('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –Ω–∞–º –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —è–≤–∫—É —á–µ—Å—Ç–Ω–æ. –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —è–≤–∫–∏ (–≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞ —É—á–∞—Å—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π-—Å—á—ë—Ç—á–∏–∫–æ–≤), –∞ —Ç–∞–∫–∂–µ –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
}

function botRenderAbout(ctx) {
  ctx.reply([
    'üë®‚Äçüè´ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å—á—ë—Ç—á–∏–∫ –∏ —è –ø–æ–º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —è–≤–∫—É –∏–∑–±–∏—Ä–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—ã–±–æ—Ä–∞—Ö 2018. \n',
    'üó£ –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–¥—Å—á—ë—Ç –∏ —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–∞—Ö –≤—Ä–æ–¥–µ –∫–∞—Ä—É—Å–µ–ª–µ–π –∏ –ø–æ–¥–≤–æ–∑–æ–≤ –≤ —Ö–æ–¥–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.\n',
    'ü§∑‚Äç‚ôÄÔ∏è –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? /help \n',
    '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:'
  ].join('\n'), {
    parse_mode: 'markdown',
    reply_markup: {
      inline_keyboard: app.GO_TO_MAIN_MENU
    }
  })
}

async function botRenderVerifyMe(ctx) {
  const [verifyCommand, verificationCode] = ctx.message.text.split(' ')
  try {
    const userId = ctx.from.id
    const telegramUser = await api.users.findUserByTelegramId(userId)

    if (telegramUser.isVerified === true) {
      return ctx.reply('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. \n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ /invitefriends')
    }
    console.log(telegramUser)
  } catch (error) {
    console.log(error)
  }

  /* user has no verification code */
  if (!verificationCode) {
    return ctx.reply([
      `–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥.`,
      `–ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç @fletcherist`,
      `–ü—Ä–∏–º–µ—Ä: (/verifyme 806247045b49ebca8d10)`,
      `–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: /aboutverification`
    ].join('\n'))
  }

  console.log(ctx.message.text)
}

function botRenderInviteFriends(ctx) {

}

function botRenderHelp(ctx) {
  ctx.reply([
    'üÜò FAQ: –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å-—Å—á—ë—Ç—á–∏–∫',
    '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –æ —è–≤–∫–µ –≤ –¥–µ–Ω—å –≤—ã–±–æ—Ä–æ–≤ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n',
    '„ÄΩÔ∏è –ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ–ø—É–±–ª–∏–∫—É–µ–º –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n',
    '1Ô∏è‚É£ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤ –¥–µ–Ω—å –≤—ã–±–æ—Ä–æ–≤ –ø—Ä–∏–¥–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å —Ç–∞–º (–∫–æ–º–∞–Ω–¥–∞ /setlocation )\n',
    '2Ô∏è‚É£ –î–∞–ª–µ–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–æ–º–∞–Ω–¥–∞ /getmainmenu) –∏ —Å—á–∏—Ç–∞–π—Ç–µ –≤—Å–µ—Ö, –∫—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –Ω–∞ —É—á–∞—Å—Ç–æ–∫.',
    '3Ô∏è‚É£ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –∑–∞–º–µ—á–µ–Ω–Ω–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∞—Ä—É—à–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥–∞ /getreportsmenu)\n',
    '4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –ø–æ–¥–≤–æ–∑–∞)\n',
    '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–π—Ç–µ –∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ‚Äî @fletcherist'

  ].join('\n'), {
    parse_mode: 'markdown',
    reply_markup: {
      inline_keyboard: app.GO_TO_MAIN_MENU
    }
  })
}

bot.command('setlocation', botRequestLocation)
bot.command('getmainmenu', botRenderMainMenu)
bot.command('me', botRenderUserProfile)
bot.command('aboutverification', botRenderAboutVerification)
bot.command('verifyme', botRenderVerifyMe)
bot.command('invitefriends', botRenderInviteFriends)
bot.command('help', botRenderHelp)

bot.on('message', async (ctx) => {
  incrementCounter(ctx)
  setLatestMessageID(ctx)
  /*
   * Handle the case when user
   * sends the location
   */
  let location = ctx.message.location
  let telegramId = ctx.from.id
  if (location) {
    ctx.session.location = location || {}
    ctx.session.location = location

    await api.users.updateTelegramUserLocation(
      telegramId,
      location.latitude,
      location.longitude
    )

    const pollingStationId = await api.users.attachTelegramUserPollingStation(telegramId)
    ctx.session.isLocationSet = true
    ctx.session.pollingStationId = pollingStationId

    return ctx.reply('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–º—É —É—á–∞—Å—Ç–∫—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Å—á–∏—Ç–∞—Ç—å —è–≤–∫—É /getmainmenu')
  }

  return botRenderMainMenu(ctx)
})

async function getLocalElectionsInfo(ctx) {
  const pollingStationId = ctx.session.pollingStationId
  const pollingStationAttendace = await api.pollingStations.getElectorsCountOnPollingStation(pollingStationId)
  return [
    `üë©‚Äçüî¨ –ù–∞ ${utils.getTime()} —è–≤–∫–∞\n`,
    `–ù–∞ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ: ${pollingStationAttendace} —á–µ–ª–æ–≤–µ–∫–∞`,
    `–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ: 1253 —á–µ–ª–æ–≤–µ–∫–∞`,
  ].join('\n')
}

async function handleNewElectorsAttendance(type, ctx) {
  /* push electors attendance into blockchain */
  try {
    const userId = ctx.from.id

    await api.electorsAttendance.createElectorsAttendanceByTelegram(
      userId, type
    )
    await api.globalStatistics.incrementElectorsAttendance(
      ELECTORS_ATTENDANCE_VALUES[type]
    )
    if (ctx.session.pollingStationId) {
      api.pollingStations.incrementElectorsCountOnPollingStation(
        ctx.session.pollingStationId, ELECTORS_ATTENDANCE_VALUES[type]
      ).then(result => console.log('polling station updated', ELECTORS_ATTENDANCE_VALUES[type]))
    }
  } catch (error) {
    ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ')
    // throw new Error(error)
  }

  ctx.answerCbQuery(ELECTORS_ATTENDANCE_CALLBACK_REPLY[type])

  if (ctx.session.latestMessageId) {
    await ctx.editMessageText(await getLocalElectionsInfo(ctx), {
      parse_mode: 'markdown',
      reply_markup: {
        inline_keyboard: app.MAIN_KEYBOARD
      }
    })
  }
}

bot.action(ACTION_TYPES.COUNT_1_ELECTOR, async (ctx) => {
  return await handleNewElectorsAttendance(ACTION_TYPES.COUNT_1_ELECTOR, ctx)
})

bot.action(ACTION_TYPES.COUNT_5_ELECTORS, async (ctx) => {
  return await handleNewElectorsAttendance(ACTION_TYPES.COUNT_5_ELECTORS, ctx)
})

bot.action(ACTION_TYPES.COUNT_10_ELECTORS, async (ctx) => {
  return await handleNewElectorsAttendance(ACTION_TYPES.COUNT_10_ELECTORS, ctx)
})

bot.action(ACTION_TYPES.REQUEST_UPDATE, (ctx) => {
  ctx.answerCbQuery(`–û–±–Ω–æ–≤–ª–µ–Ω–æ, ${utils.getTime()}`)
})

bot.action(ACTION_TYPES.GET_MAIN_MENU, botRenderMainMenu)
bot.action(ACTION_TYPES.SEND_REQUEST_LOCATION, botRequestLocation)

bot.on('callback_query', (ctx) => {
  console.log(ctx)
  ctx.answerCbQuery('–ó–∞—Å—á–∏—Ç–∞–Ω–æ')
})

bot.startPolling()
bot.catch(error => console.log(error))
